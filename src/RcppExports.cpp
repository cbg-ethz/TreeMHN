// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// build_tr_mat
arma::sp_mat build_tr_mat(int n, arma::mat Theta, const IntegerMatrix& genotypes, const List& node_labels);
RcppExport SEXP _TreeMHN_build_tr_mat(SEXP nSEXP, SEXP ThetaSEXP, SEXP genotypesSEXP, SEXP node_labelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type genotypes(genotypesSEXP);
    Rcpp::traits::input_parameter< const List& >::type node_labels(node_labelsSEXP);
    rcpp_result_gen = Rcpp::wrap(build_tr_mat(n, Theta, genotypes, node_labels));
    return rcpp_result_gen;
END_RCPP
}
// compute_obs_ll
double compute_obs_ll(arma::sp_mat tr_mat, double lambda_s);
RcppExport SEXP _TreeMHN_compute_obs_ll(SEXP tr_matSEXP, SEXP lambda_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type tr_mat(tr_matSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_s(lambda_sSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_obs_ll(tr_mat, lambda_s));
    return rcpp_result_gen;
END_RCPP
}
// compute_prob_ij
double compute_prob_ij(arma::sp_mat tr_mat, double lambda_s, int i, int j);
RcppExport SEXP _TreeMHN_compute_prob_ij(SEXP tr_matSEXP, SEXP lambda_sSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type tr_mat(tr_matSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_s(lambda_sSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_prob_ij(tr_mat, lambda_s, i, j));
    return rcpp_result_gen;
END_RCPP
}
// tree_E_step
NumericVector tree_E_step(const arma::mat Theta, int n, double lambda_s, const IntegerVector& nodes, const List& children, const LogicalVector& in_tree, const IntegerMatrix& genotypes, const List& node_labels);
RcppExport SEXP _TreeMHN_tree_E_step(SEXP ThetaSEXP, SEXP nSEXP, SEXP lambda_sSEXP, SEXP nodesSEXP, SEXP childrenSEXP, SEXP in_treeSEXP, SEXP genotypesSEXP, SEXP node_labelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_s(lambda_sSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< const List& >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type in_tree(in_treeSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type genotypes(genotypesSEXP);
    Rcpp::traits::input_parameter< const List& >::type node_labels(node_labelsSEXP);
    rcpp_result_gen = Rcpp::wrap(tree_E_step(Theta, n, lambda_s, nodes, children, in_tree, genotypes, node_labels));
    return rcpp_result_gen;
END_RCPP
}
// tree_importance_sampling
NumericVector tree_importance_sampling(NumericVector Theta, const IntegerVector& nodes, const List& children, const LogicalVector& in_tree, int n, int M, double lambda_s);
RcppExport SEXP _TreeMHN_tree_importance_sampling(SEXP ThetaSEXP, SEXP nodesSEXP, SEXP childrenSEXP, SEXP in_treeSEXP, SEXP nSEXP, SEXP MSEXP, SEXP lambda_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< const List& >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type in_tree(in_treeSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_s(lambda_sSEXP);
    rcpp_result_gen = Rcpp::wrap(tree_importance_sampling(Theta, nodes, children, in_tree, n, M, lambda_s));
    return rcpp_result_gen;
END_RCPP
}
// full_MHN_objective_
double full_MHN_objective_(NumericVector Theta, const List& trees, double gamma, int n, int N, double lambda_s, IntegerVector to_mask);
RcppExport SEXP _TreeMHN_full_MHN_objective_(SEXP ThetaSEXP, SEXP treesSEXP, SEXP gammaSEXP, SEXP nSEXP, SEXP NSEXP, SEXP lambda_sSEXP, SEXP to_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const List& >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_s(lambda_sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type to_mask(to_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(full_MHN_objective_(Theta, trees, gamma, n, N, lambda_s, to_mask));
    return rcpp_result_gen;
END_RCPP
}
// full_MHN_grad_
NumericMatrix full_MHN_grad_(NumericVector Theta, const List& trees, double gamma, int n, int N, double lambda_s, IntegerVector to_mask);
RcppExport SEXP _TreeMHN_full_MHN_grad_(SEXP ThetaSEXP, SEXP treesSEXP, SEXP gammaSEXP, SEXP nSEXP, SEXP NSEXP, SEXP lambda_sSEXP, SEXP to_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const List& >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_s(lambda_sSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type to_mask(to_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(full_MHN_grad_(Theta, trees, gamma, n, N, lambda_s, to_mask));
    return rcpp_result_gen;
END_RCPP
}
// obs_MHN_objective_
double obs_MHN_objective_(NumericVector Theta, int n, int N, double lambda_s, const List& trees, double gamma, List& obj_grad_help, IntegerVector to_mask);
RcppExport SEXP _TreeMHN_obs_MHN_objective_(SEXP ThetaSEXP, SEXP nSEXP, SEXP NSEXP, SEXP lambda_sSEXP, SEXP treesSEXP, SEXP gammaSEXP, SEXP obj_grad_helpSEXP, SEXP to_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_s(lambda_sSEXP);
    Rcpp::traits::input_parameter< const List& >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< List& >::type obj_grad_help(obj_grad_helpSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type to_mask(to_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(obs_MHN_objective_(Theta, n, N, lambda_s, trees, gamma, obj_grad_help, to_mask));
    return rcpp_result_gen;
END_RCPP
}
// obs_MHN_grad_
NumericMatrix obs_MHN_grad_(NumericVector Theta, int n, int N, double lambda_s, const List& trees, double gamma, const List& obj_grad_help, IntegerVector to_mask);
RcppExport SEXP _TreeMHN_obs_MHN_grad_(SEXP ThetaSEXP, SEXP nSEXP, SEXP NSEXP, SEXP lambda_sSEXP, SEXP treesSEXP, SEXP gammaSEXP, SEXP obj_grad_helpSEXP, SEXP to_maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_s(lambda_sSEXP);
    Rcpp::traits::input_parameter< const List& >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const List& >::type obj_grad_help(obj_grad_helpSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type to_mask(to_maskSEXP);
    rcpp_result_gen = Rcpp::wrap(obs_MHN_grad_(Theta, n, N, lambda_s, trees, gamma, obj_grad_help, to_mask));
    return rcpp_result_gen;
END_RCPP
}
// get_augmented_trees
List get_augmented_trees(int n, const List& trees);
RcppExport SEXP _TreeMHN_get_augmented_trees(SEXP nSEXP, SEXP treesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const List& >::type trees(treesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_augmented_trees(n, trees));
    return rcpp_result_gen;
END_RCPP
}
// parse_trees
List parse_trees(std::string path);
RcppExport SEXP _TreeMHN_parse_trees(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(parse_trees(path));
    return rcpp_result_gen;
END_RCPP
}
// rtexp
double rtexp(double lambda, double lbound, double ubound);
RcppExport SEXP _TreeMHN_rtexp(SEXP lambdaSEXP, SEXP lboundSEXP, SEXP uboundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lbound(lboundSEXP);
    Rcpp::traits::input_parameter< double >::type ubound(uboundSEXP);
    rcpp_result_gen = Rcpp::wrap(rtexp(lambda, lbound, ubound));
    return rcpp_result_gen;
END_RCPP
}
// get_lambda
double get_lambda(std::vector<int> node, arma::mat Theta);
RcppExport SEXP _TreeMHN_get_lambda(SEXP nodeSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_lambda(node, Theta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TreeMHN_build_tr_mat", (DL_FUNC) &_TreeMHN_build_tr_mat, 4},
    {"_TreeMHN_compute_obs_ll", (DL_FUNC) &_TreeMHN_compute_obs_ll, 2},
    {"_TreeMHN_compute_prob_ij", (DL_FUNC) &_TreeMHN_compute_prob_ij, 4},
    {"_TreeMHN_tree_E_step", (DL_FUNC) &_TreeMHN_tree_E_step, 8},
    {"_TreeMHN_tree_importance_sampling", (DL_FUNC) &_TreeMHN_tree_importance_sampling, 7},
    {"_TreeMHN_full_MHN_objective_", (DL_FUNC) &_TreeMHN_full_MHN_objective_, 7},
    {"_TreeMHN_full_MHN_grad_", (DL_FUNC) &_TreeMHN_full_MHN_grad_, 7},
    {"_TreeMHN_obs_MHN_objective_", (DL_FUNC) &_TreeMHN_obs_MHN_objective_, 8},
    {"_TreeMHN_obs_MHN_grad_", (DL_FUNC) &_TreeMHN_obs_MHN_grad_, 8},
    {"_TreeMHN_get_augmented_trees", (DL_FUNC) &_TreeMHN_get_augmented_trees, 2},
    {"_TreeMHN_parse_trees", (DL_FUNC) &_TreeMHN_parse_trees, 1},
    {"_TreeMHN_rtexp", (DL_FUNC) &_TreeMHN_rtexp, 3},
    {"_TreeMHN_get_lambda", (DL_FUNC) &_TreeMHN_get_lambda, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_TreeMHN(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
